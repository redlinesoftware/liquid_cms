= Liquid CMS

A context aware CMS Ruby on Rails engine that uses liquid templates.

If you're using rails 2, use the 0.2.x series of this gem (tested with ruby 1.8.7). https://github.com/redlinesoftware/liquid_cms/tree/rails2

If you're using rails 3, use the 0.3.x series of this gem (tested with ruby 1.9.2). https://github.com/redlinesoftware/liquid_cms

{rubygems page}[https://rubygems.org/gems/liquid_cms]

See the {wiki page}[http://github.com/redlinesoftware/liquid_cms/wiki] for additional documentation on usage and customizations... currently a work in progress.

= Installation

Add it to your config/environment.rb:

  config.gem 'liquid_cms', :version => '~> 0.2.1'

Install the gem:

  rake gems:install

Run the generator:

  script/generate liquid_cms

= Configuration

Configure the engine in config/initializers/cms/liquid_cms.rb:

  If you wish to run the cms under multiple "contexts" (ie. a cms each for a company, business, customer, etc.) then you need to perform the following steps:
  
    * Set the *context_class* attribute to your apps context class:

      config.context_class = :Company

    * And then set the context object in the Cms::SetupController or any controller up the inheritance chain.

      Cms.set_context @company, self

Add any controller specific tasks and customize the logic in app/controllers/cms/setup_controller.rb

Run the migration:

  rake db:migrate

If you later decide to use the engine under a context, you'll have to re-run the migration.

= Usage

Once the engine is configured, you can view the CMS at the <b>/cms</b> path in your browser.

= Customization

All CMS templates and the layout can be overridden in the main application.  Simply create the partial or template at the same path as the engine and your applications template will take priority.

In order to expose data in your application in the templates, liquid filters, drops, tags and blocks specific to your application can be added to the <b>app/liquid</b> folder.  Knowledge of liquid templates and the liquid library is required to do this.  Examples of custom filters, drops, tags and blocks can be found in the liquid_cms gem files or in additional documentation on this website or related forums.

A set of filters, drops and tags are provided in addition to the defaults provided by liquid.  The documentation link accessible in the CMS provides additional details.

= Upgrading

To upgrade the liquid_cms engine once you've installed a newer gem, simply re-run the liquid_cms generator. If any differences are found in files, you'll be prompted to overwrite or compare versions.

If you're upgrading to the rails 3 version of the gem from the rails 2 version of the gem, it's recommended that you run the generator with the previous CMS generated files removed from your app and then integrate any customizations back into the application.

= Contribution

If you experience any issues with this CMS engine, please open a bug report.  Contributions to improve this engine are extremely welcome.  A 1.0 release will be made when the engine has a bit more _polish_ on it.
